package com.example.inventorymanagement;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.Nullable;

import java.util.ArrayList;

public class MyDbHelper extends SQLiteOpenHelper {
    public MyDbHelper(@Nullable Context context) {
        super(context, Constants.DB_NAME, null, Constants.DB_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        //Create tables of the database (Initial)
        db.execSQL(Constants.CREATE_TABLE);
        db.execSQL(Constants.CREATE_TABLE2);
        db.execSQL(Constants.CREATE_TABLE3);
        db.execSQL(Constants.CREATE_TABLE4);
        db.execSQL(Constants.CREATE_TABLE5);
        db.execSQL(Constants.CREATE_TABLE6);
        db.execSQL(Constants.CREATE_TABLE7);
        db.execSQL(Constants.CREATE_TABLE8);

    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        //upgrade database (if there is any structure change the db version)

        db.execSQL("DROP TABLE IF EXISTS " + Constants.Company);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Users);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Stock);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Log);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Bill);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Summary);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Customer);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Logged);
        //Create again
        onCreate(db);


    }

    //clear databases
    public void Clear(Context context){

        SQLiteDatabase db =this.getWritableDatabase();
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Company);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Users);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Stock);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Log);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Bill);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Summary);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Customer);
        db.execSQL("DROP TABLE IF EXISTS " + Constants.Logged);

        onCreate(db);
        db.close();
        Toast.makeText(context, "Cleared", Toast.LENGTH_SHORT).show();
    }

    //insert record to Company

    public long insertToCompany(String Owner, String StoreName, String Phone
            , String Whatsapp, String Address, String Email, String DateAdded
            , String DateUpdated, String info) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.C_OWNER, Owner);
        values.put(Constants.C_STORENAME, StoreName);
        values.put(Constants.C_PHONE, Phone);
        values.put(Constants.C_WHATSAPP, Whatsapp);
        values.put(Constants.C_ADDRESS, Address);
        values.put(Constants.C_EMAIL, Email);
        values.put(Constants.C_ADDED, DateAdded);
        values.put(Constants.C_UPDATED, DateUpdated);
        values.put(Constants.desc, info);


        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Company, null, values);

        //close connection
        db.close();

        return id;
    }

  //INSERT INTO USERS
   public long insertToUsers(String firstName, String lastName,String username, String password, String Phone
            , String userLevel, String Address, String Email, String DateAdded
            , String DateUpdated,String log) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.FIRSTNAME, firstName);
        values.put(Constants.LASTNAME, lastName);
        values.put(Constants.USERNAME, username);
        values.put(Constants.PASSWORD, password);
        values.put(Constants.C_PHONE, Phone);
        values.put(Constants.USERLEVEL, userLevel);
        values.put(Constants.C_ADDRESS, Address);
       values.put(Constants.userLog, log);
        values.put(Constants.C_EMAIL, Email);
        values.put(Constants.C_ADDED, DateAdded);
        values.put(Constants.C_UPDATED, DateUpdated);


        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Users, null, values);

        //close connection
        db.close();

        return id;
    }


    //INSERT INTO STOCK
    public long insertToStock(String productName,String batchNumber,String quantity,String
                              expiryDate,String supplierCompany,String buyingPrice,String sellingPrice,
                              String barcode,String unit,String description,String DateAdded
            , String DateUpdated) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.productName, productName);
        values.put(Constants.batchNo, batchNumber);
        values.put(Constants.quantity, quantity);
        values.put(Constants.supplier, supplierCompany);
        values.put(Constants.costPrice, buyingPrice);
        values.put(Constants.sellingPrice, sellingPrice);
        values.put(Constants.barcode, barcode);
        values.put(Constants.expDate, expiryDate);
        values.put(Constants.unit, unit);
        values.put(Constants.desc, description);
        values.put(Constants.C_ADDED, DateAdded);
        values.put(Constants.C_UPDATED, DateUpdated);


        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Stock, null, values);

        //close connection
        db.close();

        return id;
    }


    //INSERT INTO STOCK
    public void updateStock(String id, String productName, String batchNumber, String quantity, String
            expiryDate, String supplierCompany, String buyingPrice, String sellingPrice,
                            String barcode, String unit, String description, String DateAdded
            , String DateUpdated) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.productName, productName);
        values.put(Constants.batchNo, batchNumber);
        values.put(Constants.quantity, quantity);
        values.put(Constants.supplier, supplierCompany);
        values.put(Constants.costPrice, buyingPrice);
        values.put(Constants.sellingPrice, sellingPrice);
        values.put(Constants.barcode, barcode);
        values.put(Constants.expDate, expiryDate);
        values.put(Constants.unit, unit);
        values.put(Constants.desc, description);
        values.put(Constants.C_ADDED, DateAdded);
        values.put(Constants.C_UPDATED, DateUpdated);


        //insert row , it will return record id of saved record
        db.update(Constants.Stock, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();


    }

    //INSERT INTO STOCK
    public void deductStock(String id, String quantity) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData


        values.put(Constants.quantity, quantity);

        //insert row , it will return record id of saved record
        db.update(Constants.Stock, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();


    }

    //INSERT INTO LOGS
    public long insertToLog(String description,String DateAdded) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData


        values.put(Constants.desc, description);
        values.put(Constants.C_ADDED, DateAdded);

        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Log, null, values);

        //close connection
        db.close();

        return id;
    }


    //INSERT INTO LOGS
    public long insertToBill(String items, String dateAdded, String total, String biller) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.items, items);
        values.put(Constants.C_ADDED, dateAdded);
        values.put(Constants.totalAmount, total);
        values.put(Constants.biller, biller);

        Log.e("Bill added",dateAdded);
        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Bill, null, values);
        Log.e("Bill added","successful");

        //close connection
        db.close();

        return id;
    }


    //GET ALL COMPANY
    public ArrayList<CompanyModel> getAllCOMPANY(){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>

        ArrayList<CompanyModel> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Company;
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") CompanyModel companyModel=new CompanyModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_OWNER)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_STORENAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_WHATSAPP)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_EMAIL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.desc))
                        );

                //add record to list
                recordsList.add(companyModel);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;

    }
    //GET ALL COMPANY
    public ArrayList<Modelcustomer> getAllCUSTOMERS(){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>

        ArrayList<Modelcustomer> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Customer;
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") Modelcustomer modelCustomer=new Modelcustomer(
                        ""+ cursor.getString(cursor.getColumnIndex(Constants.name)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.amount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ID))

                );

                //add record to list
                recordsList.add(modelCustomer);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;

    }


    //GET One Stock Item
    public StockModel getStocksById(String id){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="SELECT * FROM "+Constants.Stock +" WHERE "+Constants.C_ID+ " = '"+id+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        StockModel st=new StockModel();
        if(cursor.moveToFirst()){
            do {
        @SuppressLint("Range") StockModel stockModel=new StockModel(
                ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.productName)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.batchNo)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.quantity)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.expDate)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.supplier)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.costPrice)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.sellingPrice)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.barcode)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.unit)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.desc)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED))
        );

                //add record to list
                st=stockModel;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st;

    }


    //GET ALL Stock
    public ArrayList<StockModel> getAllStocks(){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>

        ArrayList<StockModel> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Stock;
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") StockModel stockModel=new StockModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.productName)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.batchNo)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.quantity)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.expDate)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.supplier)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.costPrice)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.sellingPrice)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.barcode)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.unit)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.desc)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED))

                );

                //add record to list
                recordsList.add(stockModel);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;

    }

    //DELETE from Stock
    @SuppressLint("Recycle")
    public void deleteFromStock(String id){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="DELETE FROM "+Constants.Stock+" WHERE "+Constants.C_ID+ " = '"+id+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        db.execSQL(selectQuery);
        Log.e("deleted item ",id);
        //close db connection
        db.close();


    }


    //GET ALL USERS
    public ArrayList<UserModel> getAllUSERS(String OrderBy){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<Usermodel>

        ArrayList<UserModel> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Users+" ORDER BY "+OrderBy;
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") UserModel userModel=new UserModel(
                       ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.FIRSTNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.LASTNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.PASSWORD)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERLEVEL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_EMAIL)),
                         ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.userLog))

                );

                //add record to list
                recordsList.add(userModel);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;

    }


    //SEARCH ONE USER
    public ArrayList<UserModel> searchUser(String userName,String password,String userLevel){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<Usermodel>

        ArrayList<UserModel> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Users+" WHERE "+Constants.USERNAME +" LIKE '%"+ userName+"%' AND " +Constants.PASSWORD +" LIKE '%"+ password+"%' AND "+Constants.USERLEVEL +" LIKE '%"+userLevel+"%'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") UserModel userModel=new UserModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.FIRSTNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.LASTNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.PASSWORD)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERLEVEL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_EMAIL)),
                         ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.userLog))

                );

                //add record to list
                recordsList.add(userModel);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;

    }

    //Get Registered Org
    public CompanyModel getCompany(String s) {
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="SELECT * FROM "+Constants.Company +" WHERE "+Constants.C_ID+ " = '"+s+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        CompanyModel st=new CompanyModel();
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") CompanyModel companyModel=new CompanyModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_OWNER)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_STORENAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_WHATSAPP)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_EMAIL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.desc)));

                //add record to list
                st=companyModel;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st;

    }

    public BillModel getBill(String id) {
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="SELECT * FROM "+Constants.Bill +" WHERE "+Constants.C_ID+ " = '"+id+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        BillModel st=new BillModel();
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") BillModel billModel=new BillModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.items)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.totalAmount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.trans)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.biller)));

                //add record to list
                st=billModel;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st;
    }


    //INSERT INTO LOGS
    public long insertToSummary(String date,String count,String amount,
                                String month,String monthAmount,String monthCount,String trans) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.count, count);
        values.put(Constants.C_ADDED, date);
        values.put(Constants.amount, amount);
        values.put(Constants.month, month);
        values.put(Constants.monthAmount, monthAmount);
        values.put(Constants.monthCount, monthCount);
        values.put(Constants.trans, trans);



        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Summary, null, values);

        //close connection
        db.close();

        return id;
    }

    //INSERT INTO STOCK
    public void updateBillId(String id, String TransId) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.trans, TransId );

        //insert row , it will return record id of saved record
        db.update(Constants.Bill, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();


    }
    //INSERT INTO STOCK
    public void updateSummaryId(String k, String id) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.trans, k);

        //insert row , it will return record id of saved record
        db.update(Constants.Summary, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();


    }

    public SummaryModel getSummary(String id) {
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="SELECT * FROM "+Constants.Summary +" WHERE "+Constants.C_ID+ " = '"+id+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        SummaryModel st=new SummaryModel();
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") SummaryModel summaryModel=new SummaryModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.count)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.amount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.month)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.monthAmount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.monthCount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.trans))
                );

                //add record to list
                st=summaryModel;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st;

    }

    public void UpdateSummaryCountAndAmount(String count, String amount) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.count, count  );
        values.put(Constants.amount, amount );


        //insert row , it will return record id of saved record
        db.update(Constants.Summary, values,Constants.C_ID +" = ?",new String[]{"1"});

        //close connection
        db.close();

    }
    public void UpdateSummaryDateCountAndAmount(String Date,String count, String amount) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.count, count  );
        values.put(Constants.amount, amount );
        values.put(Constants.C_ADDED, Date );

        //insert row , it will return record id of saved record
        db.update(Constants.Summary, values,Constants.C_ID +" = ?",new String[]{"1"});

        //close connection
        db.close();

    }
    public void UpdateSummaryMonthCountAndMonthAmount(String monthcount, String monthamount) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.monthCount, monthcount  );
        values.put(Constants.monthAmount, monthamount );

        //insert row , it will return record id of saved record
        db.update(Constants.Summary, values,Constants.C_ID +" = ?",new String[]{"1"});

        //close connection
        db.close();

    }
    public void UpdateSummaryMonthMonthCountAndMonthAmount(String month, String monthCount, String monthAmount) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData
        values.put(Constants.month, month  );
        values.put(Constants.monthCount, monthCount  );
        values.put(Constants.monthAmount, monthAmount );

        //insert row , it will return record id of saved record
        db.update(Constants.Summary, values,Constants.C_ID +" = ?",new String[]{"1"});

        //close connection
        db.close();
    }



    public long addCustomer(String sName, String sphone, String sdate, String sbalance, String saddr, String log) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData


        values.put(Constants.name, sName);
        values.put(Constants.C_PHONE, sphone);
        values.put(Constants.C_ADDED, sdate);
        values.put(Constants.log, log);
        values.put(Constants.C_ADDRESS, saddr);
        values.put(Constants.amount, sbalance);

        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Customer, null, values);

        //close connection
        db.close();

        return id;
    }

    //GET ALL Stock
    public ArrayList<Modelcustomer> getAllCustomers(){
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>

        ArrayList<Modelcustomer> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Customer;
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") Modelcustomer modelcustomer=new Modelcustomer(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.name)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.amount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.log)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ID))

                );

                //add record to list
                recordsList.add(modelcustomer);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;

    }


    public Modelcustomer getCustomer(String s) {

        String selectQuery ="SELECT * FROM "+Constants.Customer +" WHERE "+Constants.C_ID+ " = '"+s+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        Modelcustomer st=new Modelcustomer();
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") Modelcustomer modelcustomer=new Modelcustomer(
                        ""+ cursor.getString(cursor.getColumnIndex(Constants.name)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.amount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.log)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ID))
                );

                //add record to list
                st=modelcustomer;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st;
    }

    public void deleteCustomer(String s) {

        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="DELETE FROM "+Constants.Customer+" WHERE "+Constants.C_ID+ " = '"+s+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        db.execSQL(selectQuery);
        Log.e("deleted item ",s);
        //close db connection
        db.close();
    }

    public void updateCustomer(String s, String sName, String sphone, String sdate, String sbalance, String saddr) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData
        values.put(Constants.name, sName  );
        values.put(Constants.C_PHONE, sphone  );
        values.put(Constants.C_ADDED, sdate );
        values.put(Constants.amount, sbalance  );
        values.put(Constants.C_ADDRESS, saddr );

        //insert row , it will return record id of saved record
        db.update(Constants.Customer, values,Constants.C_ID +" = ?",new String[]{s});

        //close connection
        db.close();
    }

    public void updateCustomer(String s, String logg) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.log, logg );

        //insert row , it will return record id of saved record
        db.update(Constants.Customer, values,Constants.C_ID +" = ?",new String[]{s});

        //close connection
        db.close();
    }

    public void updateCustomer(String key, String balance, String formattedDate, String log) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.log, log );
        values.put(Constants.amount, balance );
        values.put(Constants.C_ADDED, formattedDate );

        //insert row , it will return record id of saved record
        db.update(Constants.Customer, values,Constants.C_ID +" = ?",new String[]{key});

        //close connection
        db.close();
    }

    public void deleteBill(String key) {

        String selectQuery ="DELETE FROM "+Constants.Bill+" WHERE "+Constants.C_ID+ " = '"+key+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        db.execSQL(selectQuery);
        Log.e("deleted item ",key);
        //close db connection
        db.close();

    }

    public ArrayList<Modeltrans> getBills() {

        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>

        ArrayList<Modeltrans> recordsList=new ArrayList<>();
        String selectQuery ="SELECT * FROM "+Constants.Bill;
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") Modeltrans modelt=new Modeltrans(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.items)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.totalAmount)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.biller))
                        );

                //add record to list
                recordsList.add(modelt);
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return recordsList;
    }


    public String getQuantity(String id) {

        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="SELECT * FROM "+Constants.Stock +" WHERE "+Constants.C_ID+ " = '"+id+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        StockModel st=new StockModel();
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") StockModel stockModel=new StockModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.productName)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.batchNo)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.quantity)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.expDate)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.supplier)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.costPrice)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.sellingPrice)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.barcode)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.unit)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.desc)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED))
                );

                //add record to list
                st=stockModel;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st.getQuantity();
    }

    public String getLog(String s) {


        String selectQuery ="SELECT * FROM "+Constants.Log +" WHERE "+Constants.C_ID+ " = '"+s+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);

        LogModel st=new LogModel();
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") LogModel log=new LogModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.desc)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED))
                );

                //add record to list
                st=log;
            }while (cursor.moveToNext());

        }

        //close db connection
        db.close();


        //return the list
        return st.getLog();
    }

    public void deleteUser(String s) {

        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<CompanyModel>


        String selectQuery ="DELETE FROM "+Constants.Users+" WHERE "+Constants.C_ID+ " = '"+s+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        db.execSQL(selectQuery);
        Log.e("deleted item ",s);
        //close db connection
        db.close();

    }

    public UserModel getUser(String ID) {
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<Usermodel>

        UserModel record=new UserModel();
        String selectQuery ="SELECT * FROM "+Constants.Users+" WHERE "+Constants.C_ID+ " = '"+ID+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") UserModel userModel=new UserModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.FIRSTNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.LASTNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERNAME)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.PASSWORD)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDRESS)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_PHONE)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERLEVEL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_EMAIL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_ADDED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.C_UPDATED)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.userLog))

                );

                //add record to list
                record=userModel;
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return record;
    }

    public void updateUser(String id, String firstname, String lastname,
                           String username, String pass, String phone,
                           String level, String addr, String email,
                           String dateUpdated) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData
        values.put(Constants.FIRSTNAME, firstname  );
        values.put(Constants.LASTNAME, lastname  );
        values.put(Constants.USERNAME, username );
        values.put(Constants.PASSWORD, pass  );
        values.put(Constants.C_PHONE, phone );
        values.put(Constants.USERLEVEL, level  );
        values.put(Constants.C_ADDRESS, addr );
        values.put(Constants.C_EMAIL, email  );
        values.put(Constants.C_UPDATED, dateUpdated );
        //insert row , it will return record id of saved record
        db.update(Constants.Users, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();


    }

    public void updateUserLog(String id, String log) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.userLog, log);

        //insert row , it will return record id of saved record
        db.update(Constants.Users, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();
    }


    public long addLogged(String level,String uuid) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData


        values.put(Constants.USERLEVEL, level);
        values.put(Constants.userId, uuid);
        //insert row , it will return record id of saved record
        long id = db.insert(Constants.Logged, null, values);

        //close connection
        db.close();

        return id;
    }


    public void updateLogged(String id, String level,String uuid) {
        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.USERLEVEL, level);
        values.put(Constants.userId, uuid);

        //insert row , it will return record id of saved record
        db.update(Constants.Logged, values,Constants.C_ID +" = ?",new String[]{id});

        //close connection
        db.close();
    }

    public LoggedModel getLogged(String ID) {
        //order by query will allow to sort data e.g newest to oldest , first, last name ascending or descending
        //it will return list or records since we have used return type arrayList<Usermodel>

        LoggedModel record=new LoggedModel();
        String selectQuery ="SELECT * FROM "+Constants.Logged+" WHERE "+Constants.C_ID+ " = '"+ID+"'";
        SQLiteDatabase db =this.getWritableDatabase();
        Cursor cursor=db.rawQuery(selectQuery,null);
        if(cursor.moveToFirst()){
            do {
                @SuppressLint("Range") LoggedModel userModel=new LoggedModel(
                        ""+ cursor.getInt(cursor.getColumnIndex(Constants.C_ID)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.USERLEVEL)),
                        ""+cursor.getString(cursor.getColumnIndex(Constants.userId))
                        );
                //add record to list
                record=userModel;
            }while (cursor.moveToNext());

        }
        //close db connection
        db.close();


        //return the list
        return record;
    }


    public void updateCompany(String s, CompanyModel n) {

        //get Writable database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();

        //id will auto generated by auto increment

        //insertData

        values.put(Constants.C_OWNER, n.getOwnerName());
        values.put(Constants.C_STORENAME, n.getStoreName());
        values.put(Constants.C_PHONE, n.getPhone());
        values.put(Constants.C_WHATSAPP, n.getWhatsapp());
        values.put(Constants.C_ADDRESS, n.getAddress());
        values.put(Constants.C_EMAIL, n.getEmail());
        values.put(Constants.C_ADDED,n.getDateCreated());
        values.put(Constants.C_UPDATED, n.getDateUpadted());
        values.put(Constants.desc, n.getInfo());


        //insert row , it will return record id of saved record
        db.update(Constants.Company, values,Constants.C_ID +" = ?",new String[]{s});

        //close connection
        db.close();
    }
}
